# -*- mode: ruby -*-
# vi: set ft=ruby :

VM_IP = "10.1.33.11"
VM_NAME = "Vagrant-Ubuntu-impish64"
VM_MEMORY = "1024"
VM_CPUS = "2"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/impish64"
  config.vm.box_url = "ubuntu/impish64"
  config.vm.box_check_update = true
  
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: VM_IP

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.customize ["modifyvm", :id, "--name", VM_NAME]
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    vb.memory = VM_MEMORY
    vb.cpus = VM_CPUS
  end

  config.vm.provision "shell", inline: <<-SHELL
    echo "VM - Update"
    sudo apt-get update > /dev/null 2>&1
    echo "VM - Upgrade"
    sudo apt-get upgrade -y > /dev/null 2>&1
    echo "VM - Common package install"
    sudo apt-get install -y -qq git vim tree net-tools telnet python3-pip sshpass nfs-common > /dev/null 2>&1
    echo "VM - SSH setting"
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    echo "VM - Services restart"
    sudo systemctl restart sshd
  SHELL
end
