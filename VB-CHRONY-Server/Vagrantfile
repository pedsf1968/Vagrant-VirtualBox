################################################################################
# FILE NAME   : Vagrantfile
# FILE TYPE   : Vagrantfile
# VERSION     : 220102
# ARGS        
# --help, -h               : Show Vagrantfile options
# --verbose, -v            : Verbose installation
# --timezone=TIME_ZONE     : Specify the time zone
#
# --name=VM_NAME           : Specify a name for the VM
# --hostname=VM_HOSTNAME   : Specify a hostname for the VM
# --ip=VM_IP               : Specify an IP for the VM
# --cpus=VM_CPUS           : Specify the VM core number
# --memory=VM_MEMORY       : Specify the VM memory amount in ko
#
# --range=NETWORK_IP_RANGE : Specify the NTP server network range
#
# AUTHOR      : PEDSF
# EMAIL       : pedsf.fullstack@gmail.com
#
# DESCRIPTION : NTP CHRONY server installation
################################################################################
require 'getoptlong'

###################################################################### CONSTANTS
LOG_FOLDER="/home/vagrant/logs"
LOG_PREFIX="NTP"

NETWORK_TIMEZONE = "Europe/Paris"

VM_NAME = "Vagrant-Chrony-server"
VM_HOSTNAME = "NTP-server"
VM_IP = "10.1.33.10"
VM_CPUS = "1"
VM_MEMORY = "512"
VM_GUI = false

NETWORK_IP_RANGE = "10.1.33.0/24"


###################################################################### VARIABLES
verbose = nil
networkTimezone = "#{NETWORK_TIMEZONE}"

vmName = "#{VM_NAME}"
vmHostname = "#{VM_HOSTNAME}"
vmIP = "#{VM_IP}"
vmCpus = "#{VM_CPUS}"
vmMemory = "#{VM_MEMORY}"

networkIpRange = "#{NETWORK_IP_RANGE}"

#################################################################### LAUNCH ARGS
opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--name', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--hostname', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--ip', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--cpus', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--memory', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--range', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--timezone', GetoptLong::REQUIRED_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
    when '--help'
      puts <<-EOF
Vagrant [OPTION] ...
-h, --help:
    show this help
-v, --verbose:
    Verbose installation
--name=VM_NAME:
    Set VM name, if name is not supplied default is #{VM_NAME}
--hostname=VM_HOSTNAME:
    Set VM hostname, if hostname is not supplied default is #{VM_HOSTNAME}
--ip=VM_IP:
    Set VM IP, if IP is not supplied default is #{VM_IP}
--cpus=VM_CPUS:
    Set VM core number, if the number of cores is not supplied default is #{VM_CPUS}
--ip=VM_MEMORY:
    Set VM memory amount, if the memory in ko is not supplied default is #{VM_MEMORY}
--timezone=TIME_ZONE:
    Set time zone of the network, if time zone is not supplied default is #{NETWORK_TIMEZONE}
--range=NETWORK_IP_RANGE:
    Specify network range for NTP Chrony server, if range is not supplied default is #{NETWORK_IP_RANGE}
    EOF
    exit 0
    when '--verbose'
      verbose = opt
    when '--name'
      vmName = arg
    when '--hostname'
      vmHostname = arg
    when '--ip'
      vmIP = arg
    when '--cpus'
      vmCpus = arg
    when '--memory'
      vmMemory = arg
    when '--timezone'
      networkTimezone = arg
    when '--range'
      networkIpRange = arg
  end
end

case ARGV[0]
when "provision", "up"

  if verbose != nil
    print "\nName : #{vmName}\n"
    print "Hostname : #{vmHostname}\n"
    print "IP : #{vmIP}\n"
    print "Cores : #{vmCpus}\n"
    print "Memory : #{vmMemory}\n"
    print "\nNetwork time zone : #{networkTimezone}\n"
    print "Network range : #{networkIpRange}\n"
  end
end

########################################################################## BUILD
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/impish64"
  config.vm.box_url = "ubuntu/impish64"
  config.vm.box_check_update = true
  config.vm.hostname = vmHostname
  config.vm.network "private_network", ip: vmIP
  
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.customize ["modifyvm", :id, "--name", vmName]
    vb.cpus = vmCpus
    vb.memory = vmMemory
    vb.gui = VM_GUI
  end
  
  # launch common install
  commonParameters = "#{verbose}"
  commonParameters += " --logprefix #{LOG_PREFIX}-Common"
  commonParameters += " --logdirectory #{LOG_FOLDER}"
  commonParameters += " --logfile common.log"
  commonParameters += " --ntpIP #{vmIP}"
  commonParameters += " --timezone #{networkTimezone}"
  commonParameters += " --hostname #{vmHostname}"
  commonParameters += " --ip #{vmIP}"
  
  config.vm.provision :shell, :path => "../VB-Common/common-install.sh", :args => commonParameters

  # launch Chrony install
  chronyParameters = "#{verbose}"
  chronyParameters += " --logprefix #{LOG_PREFIX}-Chrony"
  chronyParameters += " --logdirectory #{LOG_FOLDER}"
  chronyParameters += " --logfile chrony.log"
  chronyParameters += " --range #{networkIpRange}"

  config.vm.provision :shell, :path => "chrony-install.sh", :args => chronyParameters
end