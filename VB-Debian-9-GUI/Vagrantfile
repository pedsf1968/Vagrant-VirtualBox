# -*- mode: ruby -*-
# vi: set ft=ruby :

###################################################################### CONSTANTS
VM_BOX_NAME = "4linux/debian9-desktop"
VM_BOX_CHECK_UPDATE = false

VM_NAME = "debian9-desktop"
VM_HOSTNAME = "Debian-descktop-9"
VM_IP = "10.1.33.23"
VM_CPUS = "2"
VM_MEMORY = "2048"
VM_GUI = true

Vagrant.configure("2") do |config|
  config.vm.box = VM_BOX_NAME
  config.vm.box_check_update = VM_BOX_CHECK_UPDATE

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: VM_IP

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = VM_GUI
   # Customize the amount of memory on the VM:
   vb.memory = VM_MEMORY
  end
  
  config.vm.provision "shell", inline: <<-SHELL
    echo "VM - Update"
    sudo apt-get update > /dev/null 2>&1
    echo "VM - Upgrade"
    sudo apt-get upgrade -y > /dev/null 2>&1
    echo "VM - Common package install"
    sudo apt-get install -y vim tree dpkg net-tools telnet python3-pip sshpass nfs-common > /dev/null 2>&1
    echo "VM - SSH setting"
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    echo "VM - Services restart"
    sudo systemctl restart sshd
  SHELL
  
end
