################################################################################
# FILE NAME   : Vagrantfile
# FILE TYPE   : Vagrantfile
# VERSION     : 220102
# ARGS        
# --help, -h                  : Show Vagrantfile options
# --verbose, -v               : Verbose installation
# --ntpip=NTP_IP              : Specify the NTP server IP (10.1.33.10)
# --timezone=NETWORK_TIMEZONE : Specify the time zone (Europe/Paris)
#
# --name=VM_NAME              : Specify a name for the VM (Vagrant-ELK-server)
# --hostname=VM_HOSTNAME      : Specify a hostname for the VM (ELK-server)
# --ip=VM_IP                  : Specify an IP for the VM (10.1.33.15)
# --cpus=VM_CPUS              : Specify the VM core number (4)
# --memory=VM_MEMORY          : Specify the VM memory amount in ko (4096)
#
# --user=USERNAME             : Specify the superuser name for Elasticsearch (administrator)
# --password=PASSWORD         : Specify the superuser password for Elasticsearch (elastic)
#
# AUTHOR      : PEDSF
# EMAIL       : pedsf.fullstack@gmail.com
#
# DESCRIPTION : ELK server installation
################################################################################
require 'getoptlong'

###################################################################### CONSTANTS
LOG_FOLDER="/home/vagrant/logs"
LOG_PREFIX="ELK"

NTP_IP = "10.1.33.10"
NETWORK_TIMEZONE = "Europe/Paris"

VM_NAME = "Vagrant-ELK-server"
VM_HOSTNAME = "ELK-server"
VM_IP = "10.1.33.15"
VM_CPUS = "4"
VM_MEMORY = "4096"
VM_GUI = false

ELASTICSEARCH_IP="#{VM_IP}"
ELASTICSEARCH_PORT=9200
ELASTICSEARCH_SHARDING_PORT=9300
ELASTICSEARCH_KEY="https://artifacts.elastic.co/GPG-KEY-elasticsearch"
ELASTICSEARCH_SRC="https://artifacts.elastic.co/packages/7.x/apt stable main"
ELASTICSEARCH_USERNAME="administrator"
ELASTICSEARCH_PASSWORD="elastic"

KIBANA_IP="#{VM_IP}"
KIBANA_PORT=5601
KIBANA_KEY="#{ELASTICSEARCH_KEY}"
KIBANA_SRC="#{ELASTICSEARCH_SRC}"

###################################################################### VARIABLES
verbose = nil
ntpIP = "#{NTP_IP}"
networkTimezone = "#{NETWORK_TIMEZONE}"

vmName = "#{VM_NAME}"
vmHostname = "#{VM_HOSTNAME}"
vmIP = "#{VM_IP}"
vmCpus = "#{VM_CPUS}"
vmMemory = "#{VM_MEMORY}"

elasticsearchIP = "#{ELASTICSEARCH_IP}"
elasticsearchUsername = "#{ELASTICSEARCH_USERNAME}"
elasticsearchPassword = "#{ELASTICSEARCH_PASSWORD}"
kibanaIP = "#{KIBANA_IP}"

#################################################################### LAUNCH ARGS
opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--ntpip', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--timezone', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--name', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--hostname', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--ip', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--cpus', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--memory', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--user', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--password', GetoptLong::REQUIRED_ARGUMENT ],
)

opts.each do |opt, arg|
  case opt
    when '--help'
      puts <<-EOF
Vagrant [OPTION] ...
-h, --help:
    show this help
-v, --verbose:
    Verbose installation
--ntpip=NTP_IP:
    Set the NTP server IP, if IP is not supplied default is #{NTP_IP}
--timezone=TIME_ZONE:
    Set time zone of the network, if time zone is not supplied default is #{NETWORK_TIMEZONE}
--name=VM_NAME:
    Set VM name, if name is not supplied default is #{VM_NAME}
--hostname=VM_HOSTNAME:
    Set VM hostname, if hostname is not supplied default is #{VM_HOSTNAME}
--ip=VM_IP:
    Set VM IP, if IP is not supplied default is #{VM_IP}
--cpus=VM_CPUS:
    Set VM core number, if the number of cores is not supplied default is #{VM_CPUS}
--ip=VM_MEMORY:
    Set VM memory amount, if the memory in ko is not supplied default is #{VM_MEMORY}
--user=USERNAME:
    Set superuser name for Elasticsearch, if name is not supplied default is #{ELASTICSEARCH_USERNAME}
--password=PASSWORD:
    Set superuser password for Elasticsearch, if name is not supplied default is #{ELASTICSEARCH_PASSWORD}
    EOF
    exit 0
    when '--verbose'
      verbose = opt
    when '--ntpip'
      ntpIP = arg
    when '--timezone'
      networkTimezone = arg
    when '--name'
      vmName = arg
    when '--hostname'
      vmHostname = arg
    when '--ip'
      vmIP = arg
      elasticsearchIP = arg
      kibanaIP = arg
    when '--cpus'
      vmCpus = arg
    when '--memory'
      vmMemory = arg
    when '--user'
      elasticsearchUsername = arg
    when '--password'
      elasticsearchPassword = arg
  end
end

case ARGV[0]
when "provision", "up"

  if verbose != nil
    print "\nNTP server IP : #{ntpIP}\n"
    print "Network time zone : #{networkTimezone}\n"
    print "\nName : #{vmName}\n"
    print "Hostname : #{vmHostname}\n"
    print "VM IP : #{vmIP}\n"
    print "Cores : #{vmCpus}\n"
    print "Memory : #{vmMemory}\n"
    print "\nElasticsearch IP : #{elasticsearchIP}\n"
    print "Elasticsearch port : #{ELASTICSEARCH_PORT}\n"
    print "Elasticsearch sharding port : #{ELASTICSEARCH_SHARDING_PORT}\n"
    print "Elasticsearch key : #{ELASTICSEARCH_KEY}\n"
    print "Elasticsearch source : #{ELASTICSEARCH_SRC}\n"
    print "Elasticsearch user : #{ELASTICSEARCH_USERNAME}\n"
    print "Elasticsearch password : #{ELASTICSEARCH_PASSWORD}\n"
    print "\nKibana IP : #{kibanaIP}\n"
    print "Kibana port : #{KIBANA_PORT}\n"
    print "Kibana key : #{ELASTICSEARCH_KEY}\n"
    print "Kibana source : #{ELASTICSEARCH_SRC}\n"
  end
end

########################################################################## BUILD
Vagrant.configure("2") do |config|
  config.vm.boot_timeout=1200
  config.vm.box = "ubuntu/focal64"
  config.vm.box_url = "ubuntu/focal64"
  config.vm.box_check_update = true
  config.vm.hostname = vmHostname
  config.vm.network "private_network", ip: vmIP
  config.vm.network :forwarded_port, guest: ELASTICSEARCH_PORT, host: ELASTICSEARCH_PORT
  config.vm.network :forwarded_port, guest: ELASTICSEARCH_SHARDING_PORT, host: ELASTICSEARCH_SHARDING_PORT
  config.vm.network :forwarded_port, guest: KIBANA_PORT, host: KIBANA_PORT
  
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.customize ["modifyvm", :id, "--name", vmName]
    vb.cpus = vmCpus
    vb.memory = vmMemory
    vb.gui = VM_GUI   
  end

  # launch common install
  commonParameters = "#{verbose}"
  commonParameters += " --logprefix #{LOG_PREFIX}-Common"
  commonParameters += " --logfolder #{LOG_FOLDER}"
  commonParameters += " --logfile common.log"
  commonParameters += " --ntpIP #{ntpIP}"
  commonParameters += " --timezone #{networkTimezone}"
  commonParameters += " --hostname #{vmHostname}"
  commonParameters += " --ip #{vmIP}"
  
  config.vm.provision :shell, :path => "../VB-Common/common-install.sh", :args => commonParameters

  # launch Elasticsearch install
  elasticsearchParameters = "#{verbose}"
  elasticsearchParameters += " --logprefix #{LOG_PREFIX}-Elasticsearch"
  elasticsearchParameters += " --logfolder #{LOG_FOLDER}"
  elasticsearchParameters += " --logfile elasticsearch.log"
  elasticsearchParameters += " --ip #{elasticsearchIP}"
  elasticsearchParameters += " --port #{ELASTICSEARCH_PORT}"
  elasticsearchParameters += " --key #{ELASTICSEARCH_KEY}"
  elasticsearchParameters += " --src #{ELASTICSEARCH_SRC}"
  elasticsearchParameters += " --user #{elasticsearchUsername}"
  elasticsearchParameters += " --password #{elasticsearchPassword}"
  
  config.vm.provision :shell, :path => "elasticsearch-install.sh", :args => elasticsearchParameters

  # launch Kibana install
  kibanaParameters = "#{verbose}"
  kibanaParameters += " --logprefix #{LOG_PREFIX}-Kibana"
  kibanaParameters += " --logfolder #{LOG_FOLDER}"
  kibanaParameters += " --logfile kibana.log"
  kibanaParameters += " --ip #{kibanaIP}"
  kibanaParameters += " --port #{KIBANA_PORT}"
  kibanaParameters += " --key #{KIBANA_KEY}"
  kibanaParameters += " --src #{KIBANA_SRC}"
  kibanaParameters += " --elasticsearchip #{elasticsearchIP}"
  kibanaParameters += " --elasticsearchport #{ELASTICSEARCH_PORT}"
  
  config.vm.provision :shell, :path => "kibana-install.sh", :args => kibanaParameters
end
